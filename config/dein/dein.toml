[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['Shougo/context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  set laststatus=2
	set showtabline=2
  let g:lightline = {
        \ 'colorscheme': 'onehalfdark',
        \ 'active': {
        \   'left': [['mode', 'paste'], ['filename', 'modified']],
        \   'right': [['lineinfo'], ['fileencoding', 'filetype'], ['readonly', 'linter_warnings', 'linter_errors', 'linter_ok']]
        \ },
        \ 'component_function': {
        \   'linter_warnings': 'LightlineLinterWarnings',
        \   'linter_errors': 'LightlineLinterErrors',
        \   'linter_ok': 'LightlineLinterOK'
        \ },
        \ 'component_type': {
        \   'readonly': 'error',
        \   'linter_warnings': 'warning',
        \   'linter_errors': 'error',
        \   'linter_ok': 'ok'
        \ },
        \ }

  function! LightlineLinterWarnings() abort
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors
    return l:counts.total == 0 ? '' : printf('⚠%d', all_non_errors)
  endfunction

  function! LightlineLinterErrors() abort
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors
    return l:counts.total == 0 ? '' : printf('✗%d', all_errors)
  endfunction

  function! LightlineLinterOK() abort
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors
    return l:counts.total == 0 ? '✓' : ''
  endfunction
'''

[[plugins]]
repo = 'kristijanhusak/defx-icons'
hook_add = '''
  let g:defx_icons_enable_syntax_highlight = 1
  let g:defx_icons_column_length = 2
  let g:defx_icons_directory_icon = ''
  let g:defx_icons_mark_icon = '*'
  let g:defx_icons_parent_icon = ''
  let g:defx_icons_default_icon = ''
  let g:defx_icons_directory_symlink_icon = ''
  " Options below are applicable only when using "tree" feature
  let g:defx_icons_root_opened_tree_icon = ''
  let g:defx_icons_nested_opened_tree_icon = ''
  let g:defx_icons_nested_closed_tree_icon = ''
'''

[[plugins]]
repo = 'kristijanhusak/defx-git'
hook_add = '''
  let g:defx_git#indicators = {
    \ 'Modified'  : 'M',
    \ 'Staged'    : 'S',
    \ 'Untracked' : '?',
    \ 'Renamed'   : 'R',
    \ 'Unmerged'  : 'U',
    \ 'Ignored'   : 'I',
    \ 'Deleted'   : 'D',
    \ 'Unknown'   : '⁇'
    \ }
  let g:defx_git#column_length = 1
  let g:defx_git#show_ignored = 0
  let g:defx_git#raw_mode = 0
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = 'Defx'
depends = ['defx-icons', 'defx-git']
hook_add = '''
  let s:tab_id_max = 0
  function! s:tab_id() "{{{
    if ! exists('t:defx_tab_id')
      let s:tab_id_max = s:tab_id_max + 1
      let t:defx_tab_id = s:tab_id_max
    endif
    return t:defx_tab_id
  endfunction "}}}

  function! DefxExplorer(dir)
    let l:cmd = join([
          \ 'Defx',
          \ '-toggle',
          \ '-split=vertical',
          \ '-winwidth=35',
          \ '-direction=topleft',
          \ '-columns=indent:icons:filename:type',
          \ '-show_ignored_files=0',
          \], ' ')
    execute l:cmd . s:tab_id() . ' ' . a:dir
  endfunction

  nnoremap <silent> ge :call DefxExplorer("`$MY_VIMFILES`")<CR>
  function! s:defx_settings()
    nnoremap <silent><buffer><expr> <CR>  defx#do_action('open')
    nnoremap <silent><buffer><expr> <BS>  defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> c     defx#do_action('copy')
    nnoremap <silent><buffer><expr> m     defx#do_action('move')
    nnoremap <silent><buffer><expr> p     defx#do_action('paste')
    nnoremap <silent><buffer><expr> o     defx#do_action('open_or_close_tree')
    nnoremap <silent><buffer><expr> O     defx#do_action('open_tree_recursive')
    nnoremap <silent><buffer><expr> h     defx#do_action('close_tree')
    nnoremap <silent><buffer><expr> l     defx#is_directory() ? defx#do_action('open_tree') : defx#do_action('drop')
    nnoremap <silent><buffer><expr> E     defx#do_action('drop', 'vsplit')
    nnoremap <silent><buffer><expr> t     defx#do_action('drop', 'tabnew')
    nnoremap <silent><buffer><expr> P     defx#do_action('drop', 'pedit')
    nnoremap <silent><buffer><expr> a     defx#do_action('new_file')
    nnoremap <silent><buffer><expr> A     defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> d     defx#do_action('remove_trash')
    nnoremap <silent><buffer><expr> D     defx#do_action('remove')
    nnoremap <silent><buffer><expr> r     defx#do_action('rename')
    nnoremap <silent><buffer><expr> x     defx#do_action('execute_system')
    nnoremap <silent><buffer><expr> yy    defx#do_action('yank_path')
    nnoremap <silent><buffer><expr> .     defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> ~     defx#do_action('cd')
    nnoremap <silent><buffer><expr> q     defx#do_action('quit')
    nnoremap <silent><buffer><expr> <C-k> defx#do_action('toggle_select') . 'k'
    nnoremap <silent><buffer><expr> <C-j> defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> <C-a> defx#do_action('toggle_select_all')
    nnoremap <silent><buffer><expr> j     line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k     line('.') == 1 ? 'G' : 'k'
    nnoremap <silent><buffer><expr> R     defx#do_action('redraw')
    nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
    nnoremap <silent><buffer><expr> cd    defx#do_action('change_vim_cwd')

    nmap <silent><buffer> ge q
  endfunction
  autocmd FileType defx call <SID>defx_settings()
'''
hook_source = '''
  function! Root(path) abort
    return fnamemodify(a:path, ':t')
  endfunction
  call defx#custom#source('file', {
      \ 'root': 'Root',
      \})
  call defx#custom#column('icon', {
      \ 'directory_icon': '▸',
      \ 'opened_icon': '▾',
      \ })
'''

[[plugins]]
repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = 'sophacles/vim-processing'
on_ft = "processing"

[[plugins]]
repo = 'munshkr/vim-tidal'

[[plugins]]
repo = 'mattn/emmet-vim'

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_faster = 1
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_sign_column_always = 1
  let g:ale_sign_error = '✗'
  let g:ale_sign_warning = '⚠'
'''

[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
  call submode#enter_with('bufmove', 'n', '', 's>', '<C-w>>')
  call submode#enter_with('bufmove', 'n', '', 's<', '<C-w><')
  call submode#enter_with('bufmove', 'n', '', 's+', '<C-w>+')
  call submode#enter_with('bufmove', 'n', '', 's-', '<C-w>-')
  call submode#map('bufmove', 'n', '', '>', '<C-w>>')
  call submode#map('bufmove', 'n', '', '<', '<C-w><')
  call submode#map('bufmove', 'n', '', '+', '<C-w>+')
  call submode#map('bufmove', 'n', '', '-', '<C-w>-')
'''
