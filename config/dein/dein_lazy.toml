# deinの遅延読み込みの際の条件指定
# on_ft     ファイルタイプがマッチしたとき。String or List
# on_path   パスが一致した時
# on_func   呼び出し機能が一致した時
# on_source プラグインがロードされたとき
# on_cmd    コマンドが一致した時
# on_map    キーが一致した時
# on_i      on_event が奨励
# on_event  eventが発生したら
#           http://vim-jp.org/vimdoc-ja/autocmd.html#autocmd-events

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_source = '''
  call denite#custom#option('_', {
      \ 'auto_accel': v:false,
      \ 'highlight-matched-char': 'DeniteMatchedChar',
      \ 'highlight-matched-range': 'DeniteMatchedRange',
      \ 'highlight-preview-line': 'DenitePreviewLine',
      \ 'auto-highlight': v:false,
      \ 'empty': v:false,
      \ 'prompt': '>',
      \ 'sorter': 'sorter/word',
      \ 'source_names': 'short',
      \ 'unique': v:true,
      \ 'winheight': 20,
      \ })
  call denite#custom#map('insert', "<C-j>", '<denite:move_to_next_line>', 'noremap')
  call denite#custom#map('insert', "<C-k>", '<denite:move_to_previous_line>', 'noremap')
'''
hook_add = '''
  " show buffer
  "noremap <C-l> :Denite buffer<CR>

  " Most Recently Used Files
  "noremap <C-z> :Denite file_mru<CR>

  " Most Recently Used Files
  "noremap <C-p> :Denite file_rec<CR>
  "
  " 一部を抜粋しています。完全版はドキュメントを参照してください
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    " filtering ウィンドウを開く
    nnoremap <silent><buffer><expr> i       denite#do_map('open_filter_buffer')
    " Denite を閉じる
    nnoremap <silent><buffer><expr> q       denite#do_map('quit')
  endfunction
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_source = '''
  let g:deoplete#enable_at_startup = 1
  let s:deoplete_custom_option = {
    \ 'auto_complete_delay': 0,
    \ 'auto_refresh_delay': 30,
    \ 'camel_case': v:false,
    \ 'ignore_case': v:true,
    \ 'max_list': 10000,
    \ 'min_pattern_length': 1,
    \ 'on_insert_enter': v:true,
    \ 'on_text_changed_i': v:true,
    \ 'refresh_always': v:false,
    \ 'skip_chars': ['(', ')'],
    \ 'smart_case': v:true,
    \ }
  call deoplete#custom#option(s:deoplete_custom_option)
'''
hook_add = '''
  inoremap <silent><expr><CR>     pumvisible() ? deoplete#mappings#close_popup() : "\<CR>"
  inoremap <silent><expr><Tab>    pumvisible() ? "\<C-n>".deoplete#mappings#close_popup() : "\<Tab>"
  inoremap <silent><expr><C-l>    pumvisible() ? deoplete#mappings#refresh() : "\<C-l>"
  inoremap <silent><expr><C-z>    deoplete#mappings#undo_completion()
'''
on_i = 1

[[plugins]]
repo ='kristijanhusak/defx-icons'

[[plugins]]
repo ='kristijanhusak/defx-git'
hook_add = '''
	let g:defx_git#indicators = {
		\ 'Modified'  : '+',
		\ 'Staged'    : '●',
		\ 'Untracked' : '?',
		\ 'Renamed'   : '➜',
		\ 'Unmerged'  : '═',
		\ 'Deleted'   : 'x',
		\ 'Unknown'   : '?'
		\ }
'''

[[plugins]]
repo ='Shougo/defx.nvim'
on_cmd = 'Defx'
depends = ['defx-icons', 'defx-git']
hook_add = '''
	nnoremap <silent> <Space>f :<C-u>Defx -listed -resume -buffer-name=tab`tabpagenr()`<CR>
'''
hook_source = '''
	function! Root(path) abort
		return fnamemodify(a:path, ':t')
	endfunction

	call defx#custom#source('file', {
			\ 'root': 'Root',
			\})

	call defx#custom#column('filename', {
			\ 'directory_icon': '',
			\ 'opened_icon': '',
			\ })

	call defx#custom#column('mark', {
			\ 'readonly_icon': '✗',
			\ 'selected_icon': '✓',
			\ })

	call defx#custom#option('_', {
			\ 'columns': 'indent:git:icons:filename',
			\ 'show_ignored_files': 1,
			\ })
'''
[plugins.ftplugin]
defx = '''
	nnoremap <silent><buffer><expr> ~ defx#async_action('cd')
	nnoremap <silent><buffer><expr> h defx#async_action('cd', ['..'])
	nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
	nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
	nnoremap <silent><buffer><expr> l defx#async_action('open')

	nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
	nnoremap <silent><buffer><expr> <Tab> winnr('$') != 1 ? ':<C-u>wincmd w<CR>' : ':<C-u>Defx -buffer-name=temp -split=vertical<CR>'
	nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
	nnoremap <silent><buffer><expr> <CR> defx#do_action('open')
	nnoremap <silent><buffer><expr> q defx#do_action('quit')

	nnoremap <silent><buffer><expr> o defx#async_action('open_or_close_tree')
	nnoremap <silent><buffer><expr> O defx#async_action('open_tree_recursive')

	nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
	nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
	nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
	nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
	nnoremap <silent><buffer><expr> E defx#do_action('open', 'vsplit')
	nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
	nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
	nnoremap <silent><buffer><expr> N defx#do_action('new_file')
	nnoremap <silent><buffer><expr> P defx#do_action('open', 'pedit')
	nnoremap <silent><buffer><expr> S defx#do_action('toggle_sort', 'Time')
	nnoremap <silent><buffer><expr> c defx#do_action('copy')
	nnoremap <silent><buffer><expr> d defx#do_action('remove_trash')
	nnoremap <silent><buffer><expr> m defx#do_action('move')
	nnoremap <silent><buffer><expr> p defx#do_action('paste')
	nnoremap <silent><buffer><expr> r defx#do_action('rename')
	nnoremap <silent><buffer><expr> se defx#do_action('save_session')
	nnoremap <silent><buffer><expr> sl defx#do_action('load_session')
	nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
	nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
'''

[[plugins]]
repo = 'Shougo/neosnippet'
hook_source = '''
  "imap <C-k> <Plug>(neosnippet_expand_or_jump)
  "smap <C-k> <Plug>(neosnippet_expand_or_jump)
  "xmap <C-k> <Plug>(neosnippet_expand_target)
  imap <expr><C-k> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : ""
  if has('conceal')
    set conceallevel=1 concealcursor=nv
  endif
'''
on_i  = 1

